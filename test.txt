testcheckfordashboard.html 
{% extends 'base.html' %}
{% load static %}


{% block title %}Dashboard{% endblock %}

{% block content %}
    <div class="content-wrapper">
        <h2 class="dashboard-title">Dashboard Overview</h2>
        <div class="dashboard-stats">
            <div class="stat-card">
                <div class="stat-icon">
                    <img src="{% static 'images/patient-icon.png' %}" alt="Patients Icon">
                </div>
                <div class="stat-info">
                    <h3>Total Patients</h3>
                    <p>{{ total_patients }}</p>
                </div>
            </div>
            <div class="stat-card">s
                <div class="stat-icon">
                    <img src="{% static 'images/doctor-icon.png' %}" alt="Doctors Icon">
                </div>
                <div class="stat-info">
                    <h3>Total Doctors</h3>
                    <p>{{ total_doctors }}</p>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">
                    <img src="{% static 'images/appointment-icon.png' %}" alt="Appointments Icon">
                </div>
                <div class="stat-info">
                    <h3>Today's Appointments</h3>
                    <p>{{ todays_appointments }}</p>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">
                    <img src="{% static 'images/lab-report-icon.png' %}" alt="Lab Reports Icon">
                </div>
                <div class="stat-info">
                    <h3>Pending Lab Reports</h3>
                    <p>{{ pending_lab_reports }}</p>
                </div>
            </div>
            {% if user.groups.all.0.name == 'Admin' %}
            <div class="stat-card">
                <div class="stat-icon">
                    <img src="{% static 'images/medicine-icon.png' %}" alt="Medicines Icon">
                </div>
                <div class="stat-info">
                    <h3>Low Stock Medicines</h3>
                    <p>{{ low_stock_medicines }}</p>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">
                    <img src="{% static 'images/billing-icon.png' %}" alt="Billing Icon">
                </div>
                <div class="stat-info">
                    <h3>Unpaid Bills</h3>
                    <p>{{ unpaid_bills }}</p>
                </div>
            </div>
            {% endif %}
        </div>

        <div class="dashboard-section">
            <h3 class="section-title">Upcoming Appointments</h3>
            <div class="section-content">
                <table class="dashboard-table">
                    <thead>
                        <tr>
                            <th>Patient</th>
                            <th>Doctor</th>
                            <th>Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for appointment in upcoming_appointments %}
                            <tr>
                                <td>{{ appointment.patient }}</td>
                                <td>{{ appointment.doctor }}</td>
                                <td>{{ appointment.appointment_date }}</td>
                            </tr>
                        {% empty %}
                            <tr>
                                <td colspan="3">No upcoming appointments.</td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    
    </div>
{% endblock %}


testcheckforview.py



# from django.shortcuts import render, redirect, get_object_or_404
# from django.contrib.auth.decorators import login_required, user_passes_test
# from .models import Patient, Doctor, Appointment, Medicine, LabReport,Billing
# from .forms import PatientForm, DoctorForm, AppointmentForm, MedicineForm, LabReportForm,BillingForm
# from django.db.models import Q, Count
# from django.utils import timezone
# from datetime import date

# def is_admin(user):
#     return user.groups.filter(name='Admin').exists()

# def is_doctor(user):
#     return user.groups.filter(name='Doctor').exists()

# def home(request):
#     return render(request, 'home.html')

# @login_required
# @user_passes_test(lambda u: is_admin(u) or is_doctor(u))
# def patient_list(request):
#     if request.user.groups.filter(name='Doctor').exists():
#         try:
#             doctor = Doctor.objects.get(user=request.user)
#             patients = Patient.objects.filter(doctor=doctor)
#         except Doctor.DoesNotExist:
#             patients = Patient.objects.none()
#     else:
#         query = request.GET.get('q')
#         if query:
#             patients = Patient.objects.filter(
#                 Q(first_name__icontains=query) |
#                 Q(last_name__icontains=query) |
#                 Q(patient_id__icontains=query)
#             )
#         else:
#             patients = Patient.objects.all()
#     return render(request, 'patient_list.html', {'patients': patients})

# @login_required
# @user_passes_test(is_admin)
# def add_patient(request):
#     if request.method == 'POST':
#         form = PatientForm(request.POST)
#         if form.is_valid():
#             form.save()
#             return redirect('patient_list')
#     else:
#         form = PatientForm()
#     return render(request, 'add_patient.html', {'form': form})

# @login_required
# @user_passes_test(is_admin)
# def edit_patient(request, id):
#     patient = get_object_or_404(Patient, id=id)
#     if request.method == 'POST':
#         form = PatientForm(request.POST, instance=patient)
#         if form.is_valid():
#             form.save()
#             return redirect('patient_list')
#     else:
#         form = PatientForm(instance=patient)
#     return render(request, 'edit_patient.html', {'form': form, 'patient': patient})

# @login_required
# @user_passes_test(is_admin)
# def delete_patient(request, id):
#     patient = get_object_or_404(Patient, id=id)
#     if request.method == 'POST':
#         patient.delete()
#         return redirect('patient_list')
#     return render(request, 'patient_list.html', {'patients': Patient.objects.all()})

# @login_required
# @user_passes_test(lambda u: is_admin(u) or is_doctor(u))
# def dashboard(request):
#     if request.user.groups.filter(name='Doctor').exists():
#         try:
#             doctor = Doctor.objects.get(user=request.user)
#             total_patients = Patient.objects.filter(doctor=doctor).count()
#             total_doctors = 1  # Only the logged-in doctor
#             today = date.today()
#             todays_appointments = Appointment.objects.filter(
#                 doctor=doctor, appointment_date__date=today
#             ).count()
#             upcoming_appointments = Appointment.objects.filter(
#                 doctor=doctor, appointment_date__gte=timezone.now()
#             ).order_by('appointment_date')[:5]
#             pending_lab_reports = LabReport.objects.filter(
#                 patient__doctor=doctor, is_pending=True
#             ).count()
#             low_stock_medicines = 0  # Doctors don't have access to pharmacy
#             blood_group_counts = Patient.objects.filter(doctor=doctor).values('blood_group').annotate(count=Count('blood_group')).order_by('blood_group')
#         except Doctor.DoesNotExist:
#             total_patients = total_doctors = todays_appointments = pending_lab_reports = 0
#             upcoming_appointments = []
#             blood_group_counts = []
#     else:
#         total_patients = Patient.objects.count()
#         total_doctors = Doctor.objects.count()
#         today = date.today()
#         todays_appointments = Appointment.objects.filter(
#             appointment_date__date=today
#         ).count()
#         upcoming_appointments = Appointment.objects.filter(
#             appointment_date__gte=timezone.now()
#         ).order_by('appointment_date')[:5]
#         pending_lab_reports = LabReport.objects.filter(is_pending=True).count()
#         low_stock_medicines = Medicine.objects.filter(stock__lt=10).count()
#         blood_group_counts = Patient.objects.values('blood_group').annotate(count=Count('blood_group')).order_by('blood_group')
#         unpaid_bills = Billing.objects.filter(is_paid=False).count()

#     context = {
#         'total_patients': total_patients,
#         'total_doctors': total_doctors,
#         'todays_appointments': todays_appointments,
#         'upcoming_appointments': upcoming_appointments,
#         'pending_lab_reports': pending_lab_reports,
#         'low_stock_medicines': low_stock_medicines,
#         'blood_group_counts': blood_group_counts,
#         'unpaid_bills': unpaid_bills, 
#     }
#     return render(request, 'dashboard.html', context)

# @login_required
# @user_passes_test(is_admin)
# def doctor_list(request):
#     doctors = Doctor.objects.all()
#     return render(request, 'doctor_list.html', {'doctors': doctors})

# @login_required
# @user_passes_test(is_admin)
# def add_doctor(request):
#     if request.method == 'POST':
#         form = DoctorForm(request.POST)
#         if form.is_valid():
#             form.save()
#             return redirect('doctor_list')
#     else:
#         form = DoctorForm()
#     return render(request, 'add_doctor.html', {'form': form})

# @login_required
# @user_passes_test(lambda u: is_admin(u) or is_doctor(u))
# def doctor_profile(request, id):
#     doctor = get_object_or_404(Doctor, id=id)
#     if request.user.groups.filter(name='Doctor').exists() and doctor.user != request.user:
#         return render(request, 'access_denied.html')
#     assigned_patients = Patient.objects.filter(doctor=doctor)
#     context = {
#         'doctor': doctor,
#         'assigned_patients': assigned_patients,
#     }
#     return render(request, 'doctor_profile.html', context)

# @login_required
# @user_passes_test(lambda u: is_admin(u) or is_doctor(u))
# def appointment_list(request):
#     filter_by = request.GET.get('filter_by', 'all')
#     if request.user.groups.filter(name='Doctor').exists():
#         try:
#             doctor = Doctor.objects.get(user=request.user)
#             appointments = Appointment.objects.filter(
#                 doctor=doctor, appointment_date__gte=timezone.now()
#             ).order_by('appointment_date')
#         except Doctor.DoesNotExist:
#             appointments = Appointment.objects.none()
#     else:
#         appointments = Appointment.objects.filter(
#             appointment_date__gte=timezone.now()
#         ).order_by('appointment_date')
#         if filter_by == 'patient' and request.GET.get('patient_id'):
#             appointments = appointments.filter(patient_id=request.GET.get('patient_id'))
#         elif filter_by == 'doctor' and request.GET.get('doctor_id'):
#             appointments = appointments.filter(doctor_id=request.GET.get('doctor_id'))
#     patients = Patient.objects.all()
#     doctors = Doctor.objects.all()
#     context = {
#         'appointments': appointments,
#         'patients': patients,
#         'doctors': doctors,
#         'filter_by': filter_by,
#     }
#     return render(request, 'appointment_list.html', context)

# @login_required
# @user_passes_test(is_admin)
# def add_appointment(request):
#     if request.method == 'POST':
#         form = AppointmentForm(request.POST)
#         if form.is_valid():
#             form.save()
#             return redirect('appointment_list')
#     else:
#         form = AppointmentForm()
#     return render(request, 'add_appointment.html', {'form': form})

# @login_required
# @user_passes_test(is_admin)
# def edit_appointment(request, id):
#     appointment = get_object_or_404(Appointment, id=id)
#     if request.method == 'POST':
#         form = AppointmentForm(request.POST, instance=appointment)
#         if form.is_valid():
#             form.save()
#             return redirect('appointment_list')
#     else:
#         form = AppointmentForm(instance=appointment)
#     return render(request, 'edit_appointment.html', {'form': form, 'appointment': appointment})

# @login_required
# @user_passes_test(is_admin)
# def delete_appointment(request, id):
#     appointment = get_object_or_404(Appointment, id=id)
#     if request.method == 'POST':
#         appointment.delete()
#         return redirect('appointment_list')
#     return render(request, 'appointment_list.html', {'appointments': Appointment.objects.all()})

# @login_required
# @user_passes_test(is_admin)
# def medicine_list(request):
#     query = request.GET.get('q')
#     if query:
#         medicines = Medicine.objects.filter(
#             Q(name__icontains=query) |
#             Q(type__icontains=query)
#         )
#     else:
#         medicines = Medicine.objects.all()
#     return render(request, 'medicine_list.html', {'medicines': medicines})

# @login_required
# @user_passes_test(is_admin)
# def add_medicine(request):
#     if request.method == 'POST':
#         form = MedicineForm(request.POST)
#         if form.is_valid():
#             form.save()
#             return redirect('medicine_list')
#     else:
#         form = MedicineForm()
#     return render(request, 'add_medicine.html', {'form': form})

# @login_required
# @user_passes_test(is_admin)
# def update_medicine_stock(request, id):
#     medicine = get_object_or_404(Medicine, id=id)
#     if request.method == 'POST':
#         form = MedicineForm(request.POST, instance=medicine)
#         if form.is_valid():
#             form.save()
#             return redirect('medicine_list')
#     else:
#         form = MedicineForm(instance=medicine)
#     return render(request, 'update_medicine_stock.html', {'form': form, 'medicine': medicine})

# @login_required
# @user_passes_test(lambda u: is_admin(u) or is_doctor(u))
# def lab_report_list(request):
#     show_pending = request.GET.get('show_pending', 'all')
#     if request.user.groups.filter(name='Doctor').exists():
#         try:
#             doctor = Doctor.objects.get(user=request.user)
#             if show_pending == 'pending':
#                 lab_reports = LabReport.objects.filter(
#                     patient__doctor=doctor, is_pending=True
#                 )
#             else:
#                 lab_reports = LabReport.objects.filter(patient__doctor=doctor)
#         except Doctor.DoesNotExist:
#             lab_reports = LabReport.objects.none()
#     else:
#         if show_pending == 'pending':
#             lab_reports = LabReport.objects.filter(is_pending=True)
#         else:
#             lab_reports = LabReport.objects.all()
#     context = {
#         'lab_reports': lab_reports,
#         'show_pending': show_pending,
#     }
#     return render(request, 'lab_report_list.html', context)

# @login_required
# @user_passes_test(is_admin)
# def add_lab_report(request):
#     if request.method == 'POST':
#         form = LabReportForm(request.POST)
#         if form.is_valid():
#             form.save()
#             return redirect('lab_report_list')
#     else:
#         form = LabReportForm()
#     return render(request, 'add_lab_report.html', {'form': form})

# @login_required
# @user_passes_test(is_admin)
# def update_lab_report(request, id):
#     lab_report = get_object_or_404(LabReport, id=id)
#     if request.method == 'POST':
#         form = LabReportForm(request.POST, instance=lab_report)
#         if form.is_valid():
#             form.save()
#             return redirect('lab_report_list')
#     else:
#         form = LabReportForm(instance=lab_report)
#     return render(request, 'update_lab_report.html', {'form': form, 'lab_report': lab_report})
# @login_required
# @user_passes_test(is_admin)
# def billing_list(request):
#     bills = Billing.objects.all()
#     return render(request, 'billing_list.html', {'bills': bills})

# @login_required
# @user_passes_test(is_admin)
# def add_billing(request):
#     if request.method == 'POST':
#         form = BillingForm(request.POST)
#         if form.is_valid():
#             form.save()
#             return redirect('billing_list')
#     else:
#         form = BillingForm()
#     return render(request, 'add_billing.html', {'form': form})

# @login_required
# @user_passes_test(is_admin)
# def update_billing(request, id):
#     bill = get_object_or_404(Billing, id=id)
#     if request.method == 'POST':
#         form = BillingForm(request.POST, instance=bill)
#         if form.is_valid():
#             form.save()
#             return redirect('billing_list')
#     else:
#         form = BillingForm(instance=bill)
#     return render(request, 'update_billing.html', {'form': form, 'bill': bill})
